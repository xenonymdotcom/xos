/* Linker script for kernel */

/* Define the kernel entry point. Needed to prevent ld's -gc-sections option
 * getting rid of everything
 */
ENTRY(_start)

/* Define the memory as starting at 0x8000, and being a megabyte long
 * (shouldn't need to be more than this)
 */

MEMORY
{
	kernel : org = 0x8000, len = 1M
}

/* Output kernel code (.text) and data (.bss) into kernel address space
 *
 * Make sure start.o comes first, so the entry point is at the start of the
 * file
 *
 * the bss is at the end so it does not need to be included in to image
 *
 * and finally the heap start so we know where the memory starts that we can write to.
 *
 * at present any read/write data is in this same image, realy we should be storing 
 * the initial data in the image but have the rtl relocate it to a know position so
 * we can mark the kernel ro/text as read only and then protect it.
 *
 * later revs may do this or load up an elf image that it the real kernel.
 *
 */

SECTIONS
{
	.text : 
	{ 
		start.o (.text) 
		* (.text*) 
	} >kernel
	
	.init_array : 
	{
    _init_array_start = .;
		KEEP(*(.init_array))
	    KEEP(*(.init_array*))
    _init_array_end = .;
	} > kernel
	
	.ro : 
	{ 
	    *(.ro*) 
	} >kernel
	
	.arm : { *(.ARM.exidx*) } >kernel
	
	.attrs : { *(.ARM.attributes) } >kernel
	
	.data : { *(.data*) } >kernel

	.bss : 
	{ 
    _bss_start = .;
		*(.bss*) 
    _bss_end = .;
	} >kernel
	
	.heap_start :
	{
	    _heap_start = .;
	} > kernel
}
